table Time
	lineageTag: 07e7110b-40fa-481c-8f82-f2ae0cce905f

	column Indice
		dataType: int64
		formatString: 0
		lineageTag: c3504eea-4f64-4703-89eb-192e368686d9
		summarizeBy: none
		sourceColumn: Indice

		annotation SummarizationSetBy = Automatic

	column Horario
		dataType: string
		lineageTag: dcf95da3-eb59-4796-baeb-82a32058c06e
		summarizeBy: none
		sourceColumn: Horario

		annotation SummarizationSetBy = Automatic

	column Horario12h
		dataType: string
		lineageTag: 02c7a160-86b6-4fc8-a90d-6983560ab3d7
		summarizeBy: none
		sourceColumn: Horario12h

		annotation SummarizationSetBy = Automatic

	column Hora
		dataType: int64
		formatString: 0
		lineageTag: 3eb5554b-b17c-4158-9d55-556f768e2c87
		summarizeBy: none
		sourceColumn: Hora

		annotation SummarizationSetBy = Automatic

	column Minuto
		dataType: int64
		formatString: 0
		lineageTag: 5d271813-fb0c-4deb-a612-27501e8ab2c3
		summarizeBy: none
		sourceColumn: Minuto

		annotation SummarizationSetBy = Automatic

	column Segundo
		dataType: int64
		formatString: 0
		lineageTag: fb7039d7-a20f-40fc-8849-33731395f667
		summarizeBy: none
		sourceColumn: Segundo

		annotation SummarizationSetBy = Automatic

	column HoraInicio
		dataType: string
		lineageTag: 47441f8d-b1fa-472e-b385-4a4ebd2c25e1
		summarizeBy: none
		sourceColumn: HoraInicio

		annotation SummarizationSetBy = Automatic

	column MinutoInicio
		dataType: string
		lineageTag: 220ecdf8-5861-4620-9430-9ab74f9e302c
		summarizeBy: none
		sourceColumn: MinutoInicio

		annotation SummarizationSetBy = Automatic

	column DiaPeriodo
		dataType: string
		lineageTag: 2832865f-e60b-4a4e-9338-e278f8001222
		summarizeBy: none
		sourceColumn: DiaPeriodo

		annotation SummarizationSetBy = Automatic

	column TurnoNumero
		dataType: int64
		formatString: 0
		lineageTag: cb5ea136-0e15-4221-b8a6-8a3e64252df5
		summarizeBy: none
		sourceColumn: TurnoNumero

		annotation SummarizationSetBy = Automatic

	partition Time = m
		mode: import
		source = ```
				let
				
				    #"-----PARAMETERS-----" = "",
				
				    // Available: en-US, pt-BR, es-ES
				    language = "pt-BR",
				
				    #"-----INTERNAL USE-----" = "",
				
				    // The table with auxiliary texts cross the languages
				    auxiliaryPeriodTable = Table.UnpivotOtherColumns(
				        #table(
				            type table [Class=text, #"en-US"=text, #"pt-BR"=text, #"es-ES"=text],
				            {
				                  { "Dawn"     , "Dawn"     , "Madrugada", "Madrugada" }
				                , { "Morning"  , "Morning"  , "Manhã"    , "Mañana"    }
				                , { "Afternoon", "Afternoon", "Tarde"    , "Tarde"     }
				                , { "Night"    , "Night"    , "Noite"    , "Noche"     }
				            }
				        ),
				        {"Class"}, "Language", "Value"
				    ),
				
				    // Filtered table on selected language
				    filteredAuxiliaryTableOnLanguage = Table.SelectRows(auxiliaryPeriodTable, each [Language] = language),
				
				    // Texts on language
				   dawn = filteredAuxiliaryTableOnLanguage{[Class="Dawn"]}[Value],
				   morning = filteredAuxiliaryTableOnLanguage{[Class="Morning"]}[Value],
				   afternoon = filteredAuxiliaryTableOnLanguage{[Class="Afternoon"]}[Value],
				   night = filteredAuxiliaryTableOnLanguage{[Class="Night"]}[Value],
				
				    // Special character to sort periods of the day
				    zws = Character.FromNumber(8203),
				
				
				    #"-----GENERATING DATA-----" = "",
				    
				    // List of indexes from 0 to 86399 (24 hours)
				    indexesList = {0..86399},
				
				    // Table with indexes
				    initialTable = Table.FromList(indexesList, Splitter.SplitByNothing(), type table [Index = Int64.Type]),
				
				    // Add column with time
				    add_Time = Table.AddColumn(initialTable, "Time", each #time(0, 0, 0) + #duration(0, 0, 0, [Index]), type time),
				    add_Time12 = Table.AddColumn(add_Time, "Time12", each Time.ToText([Time], [Format = "hh:mm:ss tt", Culture = "en-US"]), type text),
				    add_Hour = Table.AddColumn(add_Time12, "Hour", each Time.Hour([Time]), Int64.Type),
				    add_Minute = Table.AddColumn(add_Hour, "Minute", each Time.Minute([Time]), Int64.Type),
				    add_Second = Table.AddColumn(add_Minute, "Second", each Time.Second([Time]), Int64.Type),
				    add_HourStart = Table.AddColumn(add_Second, "HourStart", each Time.StartOfHour([Time]), type time),
				    add_MinuteStart = Table.AddColumn(add_HourStart, "MinuteStart", each #time([Hour], [Minute], 0), type time),
				    add_DayPeriod = Table.AddColumn(
				        add_MinuteStart, 
				        "DayPeriod", 
				        each if [Hour] < 6 then Text.Repeat(zws, 3) & dawn 
				            else if [Hour] < 12 then Text.Repeat(zws, 2) & morning
				            else if [Hour] < 18 then Text.Repeat(zws, 1) & afternoon 
				            else night  
				        , type text
				    ),
				
				    add_Shift = Table.AddColumn(
				        add_DayPeriod,
				        "ShiftNumber",
				        each if [Time] >= #time( 5,  0, 0) and [Time] <= #time(13, 29, 59) then 1 else
				             if [Time] >= #time(11, 30, 0) and [Time] <= #time(21, 59, 59) then 2 else
				             if [Time] >= #time(22, 00, 0) or  [Time] <= #time( 4, 59, 59) then 3 else null,
				        Int64.Type
				    ),
				
				    transformTimeToText = Table.TransformColumns(add_Shift,{
				        {"Time", each Time.ToText(_,"hh:mm:ss"), type text},
				        {"HourStart", each Time.ToText(_,"hh:mm:ss"), type text},
				        {"MinuteStart", each Time.ToText(_,"hh:mm:ss"), type text}
				    }),
				
				    #"-----RENAME COLUMNS-----" = "",
				
				    columnNamesDictionary = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText("ZY/BCsIwDIbfpeddtmfoYQMVobuNHeoWXcA1UFrQt7dZW1r1lC9/fvIn0yQGs8JLNFxxgQJzM4kRd1Z6stoiVZSHbVfEttu+Gzb15G1Sc2H5jMY7Xn0AFeChgoXMGjQFD29WqiivVE5blxYOBpfjuAgSTvonJ7tjxp//WWVL/b5CuJ/jJerIbE4U3EGOZ254dxe/34A/HL01FDqw7I4QzIcs5vkD", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [#"en-US" = _t, #"pt-BR" = _t, #"es-ES" = _t]),
				    
				    fromToColumnNames = if language <> "en-US" then List.Zip(Table.ToColumns(Table.SelectColumns(columnNamesDictionary, {"en-US", language}))) else null,
				    renamedTable = if language <> "en-US" then Table.RenameColumns(transformTimeToText, fromToColumnNames) else add_Shift
				in
				    renamedTable
				```

	annotation PBI_NavigationStepName = Navegação

	annotation PBI_ResultType = Table

